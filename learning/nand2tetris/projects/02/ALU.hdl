// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the output bits:
 * zr = (out == 0, 1, 0)
 * ng = (out < 0,  1, 0)
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // (out == 0, 1, 0)
        ng;      // (out < 0,  1, 0)

    PARTS:
        //handle decide which values to get rid of
        Mux16(a=x, b[0..15]=false, sel=zx, out=xMux);
        Mux16(a=y, b[0..15]=false, sel=zy, out=yMux);

        //not the input if required
        Not16(in=xMux, out=xMuxNot);
        Not16(in=yMux, out=yMuxNot);
        
        Mux16(a=xMux, b=xMuxNot, sel=nx, out=readyX);
        Mux16(a=yMux, b=yMuxNot, sel=ny, out=readyY);

        //compute (out = x + y) or (out = x & y)
        Add16(a=readyX, b=readyY, out=sum);
        And16(a=readyX, b=readyY, out=andXY);

        //decide which value to use
        Mux16(a=andXY, b=sum, sel=f, out=computation);

        //negate the output if needed
        Not16(in=computation, out=notComputation);
        Mux16(a=computation, b=notComputation, sel=no, out=out, out[15]=ng, out[0..7]=out8, out[8..15]=out16);

        //check if the value (16 bits) is 0
        Or8Way(in=out8, out=computedOr1);
        Or8Way(in=out16, out=computedOr2);
        Or(a=computedOr1, b=computedOr2, out=computedOr3);
        Not(in=computedOr3, out=zr);

}